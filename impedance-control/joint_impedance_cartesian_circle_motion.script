# Joint-Space PD Torque Controller with Dynamics Compensation
# Works with Polyscope 5.22 beta which can be downloaded from: https://ur.centercode.com/key/PolyScope5Beta

# --- Parameters and Gains ---

# Maximum joint torques for UR3 (Nm)
# https://www.universal-robots.com/articles/ur/robot-care-maintenance/max-joint-torques-cb3-and-e-series/
max_torque_ur3_spec = [56.0, 56.0, 28.0, 9.0, 9.0, 9.0]

# --- Robot Size Parameters (auto-detect by reach) ---
robot_reach = get_forward_kin([0,0,0,0,0,0])
reach = norm(robot_reach[0])

if reach < 0.5:
    # UR3e
    max_torque = max_torque_ur3_spec / 4             # Max torque to clamp to
    Kp = [1000, 1000, 500, 100, 100, 100] * 0.7      # Proportional gains (tune as needed)
    Kd = [2*sqrt(Kp[0]), 2*sqrt(Kp[1]), 2*sqrt(Kp[2]), 2*sqrt(Kp[3]), 2*sqrt(Kp[4]), 2*sqrt(Kp[5])]  # Derivative gains

    radius = 0.15         # Circle radius (meters)
    rad_per_sec = 1.5     # Angular speed (rad/s)
    speed_ramp_up = 0.05  # Speed ramp-up increment

elif reach < 1.0:
    # UR5e
    max_torque = max_torque_ur3_spec / 2             # Max torque to clamp to
    Kp = [1000, 1000, 500, 100, 100, 100]            # Proportional gains (tune as needed)
    Kd = [2*sqrt(Kp[0]), 2*sqrt(Kp[1]), 2*sqrt(Kp[2]), 2*sqrt(Kp[3]), 2*sqrt(Kp[4]), 2*sqrt(Kp[5])]  # Derivative gains

    radius = 0.25         # Circle radius (meters)
    rad_per_sec = 1.5     # Angular speed (rad/s)
    speed_ramp_up = 0.005 # Speed ramp-up increment

else:
    # UR10e or longer
    max_torque = max_torque_ur3_spec                 # Max torque to clamp to
    Kp = [1000, 1000, 500, 100, 100, 100] * 1.3      # Proportional gains (tune as needed)
    Kd = [2*sqrt(Kp[0]), 2*sqrt(Kp[1]), 2*sqrt(Kp[2]), 2*sqrt(Kp[3]), 2*sqrt(Kp[4]), 2*sqrt(Kp[5])] * 1.3 # Derivative gains

    radius = 0.35         # Circle radius (meters)
    rad_per_sec = 1.5     # Angular speed (rad/s)
    speed_ramp_up = 0.005 # Speed ramp-up increment
end

# --- Utility Functions ---

# Clamp each element of an array to +/- clampValue
def clampArray(value, clampValue):
    pdiff = value - clampValue
    mdiff = value + clampValue
    ret = value
    j = 0
    while j < length(value):
        if pdiff[j] > 0:
            ret[j] = clampValue[j]
        elif mdiff[j] < 0:
            ret[j] = -clampValue[j]
        end
        j = j + 1
    end
    return ret
end

# Transform velocity vector v from offset t to base frame
def screw_trans(t, v):
  local vw = wrench_trans(t, [v[3], v[4], v[5], v[0], v[1], v[2]])
  return [vw[3], vw[4], vw[5], vw[0], vw[1], vw[2]]
end

# --- Trajectory Generation ---

# Generate circle trajectory pose, velocity, and acceleration at given time
def get_circle_pos(time):
    circ_pose = p[
        radius * cos(rad_per_sec * time),
        radius * sin(rad_per_sec * time),
        0, 0, 0, 0
    ]
    circ_vel = [
        radius * -sin(rad_per_sec * time),
        radius * cos(rad_per_sec * time),
        0, 0, 0, 0
    ]
    circ_acc = [
        radius * -cos(rad_per_sec * time),
        radius * -sin(rad_per_sec * time),
        0, 0, 0, 0
    ]
    return struct(p = circ_pose, v = circ_vel, a = circ_acc)
end

# --- Initialization ---

# The circle motion will start from the robot's current position

time = 0  # Trajectory time
start_pos = get_target_tcp_pose()  # Initial TCP pose
offset_pos = pose_trans(start_pos, pose_inv(get_circle_pos(time).p))  # Offset to keep circle relative to start

speed_scale = 0                   # Velocity scaling factor (for smooth start)
actual_speed_scale_acc = 0        # Actual speed scale acceleration
q_err = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]      # Joint position error (init)
q_err_acc = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]  # Joint acceleration error (init)

# --- Main Control Loop ---

while True:
    # 1. Get desired circle trajectory state at current time
    circle_state = get_circle_pos(time)

    # 2. Compute next TCP pose along the circle, then get corresponding joint targets
    next_pos = pose_trans(offset_pos, circle_state.p)
    target_q = get_inverse_kin(next_pos)

    # 3. Compute desired joint velocities and accelerations (via Jacobian and its derivative)
    inv_jac = inv(get_jacobian(target_q))
    target_qd = inv_jac * (screw_trans(offset_pos, circle_state.v) * speed_scale)
    target_qdd = inv_jac * (screw_trans(offset_pos, circle_state.a + actual_speed_scale_acc) - get_jacobian_time_derivative(target_q) * target_qd)

    # 4. Calculate joint position and velocity errors
    q_err = target_q - get_actual_joint_positions()
    q_err_d = target_qd - get_actual_joint_speeds()

    # 5. Compute torque target using PD control and dynamics compensation
    torque_target = get_mass_matrix() * target_qdd + Kp * q_err + Kd * q_err_d + get_coriolis_and_centrifugal_torques()

    # 6. Clamp torque to safe limits and send command
    torque_target = clampArray(torque_target, max_torque)
    torque_command(torque_target, friction_comp = True)

    # 7. Advance trajectory time based on current speed scale
    time = time + speed_scale * get_steptime()

    # 8. Smoothly ramp up speed at the start
    if speed_scale < 1:
        actual_speed_scale_acc = speed_ramp_up
        speed_scale = speed_scale + actual_speed_scale_acc
    end

    # The cpu time used, needs to be less than 2ms to fulfil the realtime requirements
    global ms_used = get_rtde_value("actual_execution_time")
end
